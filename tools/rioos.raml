#%RAML 0.8
title: Example
version: 1
baseUri: http://example.com/{version}
documentation:
  - title: Welcome
    content: |
      Welcome to the Example Documentation. The Example API allows you
      to do stuff. See also [example.com](https://www.example.com).

      ```javascript
      var raml2html = require('raml2html');

      // Using the default templates:
      // source can either be a filename, file contents (string) or parsed RAML object
      raml2html.parse(source, onSuccess, onError);

      // Using your own templates:
      // - config should be an object with at least an `template` property
      // - config can also include `helpers` and `partials`
      // - the config object will be accessible from your handlebars templates
      raml2html.parseWithConfig(source, config, onSuccess, onError);
      ```
  - title: Chapter two
    content: More content here. Including **bold** text!

securitySchemes:
  - oauth_1_0:
      description: OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
      type: OAuth 1.0
      settings:
        requestTokenUri: https://api.dropbox.com/1/oauth/request_token
        authorizationUri: https://www.dropbox.com/1/oauth/authorize
        tokenCredentialsUri: https://api.dropbox.com/1/oauth/access_token

traits:
  - paged:
      queryParameters:
        page_size:
          description: The number of items per page
          type: number
          default: 20
        page:
          description: The page to return
          type: number
          default: 0

/account:
  displayName: ACCOUNTS

  description: |

     Accounts  represents the details of user access information

  post:
    description: |
      Creates a new account.
    body:
      application/json:
        example: |
          {
            "email": "john@example.com",
            "password": "super_secret",
            "name": "John Doe"
          }
    responses:
      201:
        description: The request has been fulfilled, resulting in the creation of a new Account was created and user is now logged in.

  get:
    description: |
       Get the user account details.

    responses:
      200:
        description: The request has succeeded, the response will contain an entity of required account details.
      404:
        description: The requested resource could not be found

/assemblies:
  displayName: ASSEMBLIES

  description: |
       Assemblies is a CAMP term which represents a group  of application and services and their declaration.

  post:
    description: |
      Creates a new assemblies

    body:
      application/json:
        example: |
          {
            "name": "calcines",
            "org_id": "ORG123",
            "assemblies": []
          }
    responses:
      201:
        description: The request has been fulfilled, resulting in the creation of a new assemblies.

  get:
    description: |

      Get the assemblies details

    responses:
      200:
        description: The request has succeeded, the response will contain an entity of required assemblies details.
      404:
        description: The requested resource could not be found

/assembly:
  displayName: ASSEMBLY

  description: |

     Assembly is a CAMP term which represents a VM can be an assembly. We assume that A VM will contain one component only

  post:
    description: |
      Creates a new assembly.

    body:
      application/json:
        example: |
          {
            "name": "calcines",
            "org_id": "ORG123",
            "components": []
          }
    responses:
      201:
        description: The request has been fulfilled, resulting in the creation of a new assembly.
  get:
     description: |
       Get the assembly details.
     responses:
      200:
        description: The request has succeeded, the response will contain an entity of required assembly details.
      404:
        description: The requested resource could not be found


/components:
  displayName: COMPONENTS

  description: |

    Components is a CAMP term which represents an application or a service that can be assembled.

  post:
    description: |
      Creates a new components and user is now launched the apps.

    body:
      application/json:

        example: |
          {
            "name": "NettieMoore",
            "tosca_type": "tosca.web.redis",
            "inputs": [{
                        "key" : "domain",
                        "value" : "megam.co",
                        }]
           }
    responses:
      201:
        description: The request has been fulfilled, resulting in the creation of a new components.

  get:
     description: |
       Get the components details.
     responses:
      200:
        description: The request has succeeded, the response will contain an entity of required components details.
      404:
        description: The requested resource could not be found
