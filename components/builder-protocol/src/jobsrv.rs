// Copyright (c) 2016-2017 Chef Software Inc. and/or applicable contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use message::{Persistable, Routable};
use protobuf::{ProtobufEnum, RepeatedField};
use regex::Regex;
use serde::ser::SerializeStruct;
use serde::{Serialize, Serializer};
use sharding::InstaId;
use std::result;
use std::str::FromStr;

pub use message::jobsrv::*;
pub use message::asmsrv::*;

impl Serialize for Assembly {
    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut strukt = try!(serializer.serialize_struct("assembly", 10));


        strukt.end()
    }
}

#[derive(Debug)]
pub enum Error {
    BadJobState,
}

impl Into<Job> for JobSpec {
    fn into(mut self) -> Job {
        let mut job = Job::new();
        job.set_owner_id(self.get_owner_id());
        job.set_project(self.take_project());
        job
    }
}


impl Serialize for Job {
    fn serialize<S>(&self, serializer: S) -> result::Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut strukt = try!(serializer.serialize_struct("job", 10));

        // Technically, an ID is a 64-bit integer, but that can cause
        // issues when processing it in JavaScript on the front-end,
        // so we'll render it as a string instead.
        //
        // Ideally, we'd like to use some kind of declarative
        // approach, using a `#[serde(with = "...")]`
        // annotation. Since the Job struct is code-generated by the
        // protobuf machinery, though, we'd need to do something like
        // declare another struct that mirrors the structure of the
        // JSON output, add annotations to *that*, and then define a
        // conversion from the protobuf message struct into the JSON
        // struct. Maybe we can take that approach in a later PR and
        // treat all our structs consistently.
        strukt.serialize_field("id", &self.get_id().to_string())?;

        strukt.serialize_field("created_at", &self.get_created_at())?;

        // Technically, we could get the origin and name from the
        // package identifier, but we'll only have that if the job was
        // complete. The project information will always be present,
        // however.
        strukt.serialize_field(
            "origin",
            &self.get_project().get_origin_name(),
        )?;
        strukt.serialize_field(
            "name",
            &self.get_project().get_package_name(),
        )?;

        if self.has_package_ident() {
            let ident = self.get_package_ident();
            strukt.serialize_field("version", ident.get_version())?;
            strukt.serialize_field("release", ident.get_release())?;
        }

        if self.has_build_started_at() {
            strukt.serialize_field(
                "build_started_at",
                &self.get_build_started_at(),
            )?;
        }
        if self.has_build_finished_at() {
            strukt.serialize_field(
                "build_finished_at",
                &self.get_build_finished_at(),
            )?;
        }


        if self.has_error() {
            try!(strukt.serialize_field("error", self.get_error()));
        }
        strukt.end()
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    use std::iter::FromIterator;

    #[test]
    fn test_ansi_stripping() {
        let mut log = JobLog::new();
        log.set_is_complete(false);
        log.set_start(0);
        log.set_stop(4);

        let lines = vec![
            "[1;33mÂ» Importing origin key from standard log[0m",
            "[1;34mâ˜… Imported secret origin key core-20160810182414.[0m",
            "[1;33mÂ» Installing core/hab-backline[0m",
            "[1;32mâ†“ Downloading[0m core/hab-backline/0.23.0/20170511220008",
        ];

        let input_lines = lines.iter().map(|l| l.to_string());
        let content = RepeatedField::from_iter(input_lines);
        log.set_content(content);

        log.strip_ansi();

        let stripped_lines: Vec<String> = log.get_content()
            .into_iter()
            .map(|l| l.to_string())
            .collect();

        let expected = vec![
            "Â» Importing origin key from standard log",
            "â˜… Imported secret origin key core-20160810182414.",
            "Â» Installing core/hab-backline",
            "â†“ Downloading core/hab-backline/0.23.0/20170511220008",
        ];
        assert_eq!(stripped_lines, expected);
    }

}
